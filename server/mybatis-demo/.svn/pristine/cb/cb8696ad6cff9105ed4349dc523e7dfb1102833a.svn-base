package com.cdgit.loan.securitymanagement.service;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cdgit.loan.csm.common.Constant;
import com.cdgit.loan.securitymanagement.bean.GrtBondPledge;
import com.cdgit.loan.securitymanagement.bean.GrtBuildingProject;
import com.cdgit.loan.securitymanagement.bean.GrtChargingRightMortgage;
import com.cdgit.loan.securitymanagement.bean.GrtCollateral;
import com.cdgit.loan.securitymanagement.bean.GrtCurrentAssets;
import com.cdgit.loan.securitymanagement.bean.GrtDeposit;
import com.cdgit.loan.securitymanagement.bean.GrtEarningsAccount;
import com.cdgit.loan.securitymanagement.bean.GrtIntangibleAssets;
import com.cdgit.loan.securitymanagement.bean.GrtIntellPropertyRights;
import com.cdgit.loan.securitymanagement.bean.GrtLandManagementRight;
import com.cdgit.loan.securitymanagement.bean.GrtLandUseRight;
import com.cdgit.loan.securitymanagement.bean.GrtMerchandise;
import com.cdgit.loan.securitymanagement.bean.GrtRealEstateDetail;
import com.cdgit.loan.securitymanagement.bean.GrtRealEstateMortgage;
import com.cdgit.loan.securitymanagement.bean.GrtReceivable;
import com.cdgit.loan.securitymanagement.bean.GrtTrafficCar;
import com.cdgit.loan.securitymanagement.bean.GrtTrafficShip;
import com.cdgit.loan.securitymanagement.bean.GrtVehicleTypeMortgage;
import com.cdgit.loan.securitymanagement.bean.GrtWoodlandProperty;
import com.cdgit.loan.securitymanagerment.mapper.GrtBondPledgeMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtBuildingProjectMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtChargingRightMortgageMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtCollateralMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtCurrentAssetsMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtDepositMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtEarningsAccountMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtIntangibleAssetsMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtIntellPropertyRightsMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtLandManagementRightMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtLandUseRightMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtMerchandiseMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtRealEstateDetailMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtRealEstateMortgageMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtReceivableMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtTrafficCarMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtTrafficShipMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtVehicleTypeMortgageMapper;
import com.cdgit.loan.securitymanagerment.mapper.GrtWoodlandPropertyMapper;
import com.fasterxml.jackson.core.JsonProcessingException;

@Service
@org.springframework.transaction.annotation.Transactional
public class GrtCollateralServiceImpl {
	@Autowired
    private GrtCollateralMapper grtCollateralMapper;
	@Autowired
    private GrtDepositMapper grtDepositMapper;
	@Autowired
    private GrtIntangibleAssetsMapper grtIntangibleAssetsMapper;
	@Autowired
	private GrtRealEstateMortgageMapper grtRealEstateMortgageMapper;
	@Autowired
	private GrtBuildingProjectMapper grtBuildingProjectMapper;
	@Autowired
	private GrtTrafficCarMapper grtTrafficCarMapper;
	@Autowired
	private GrtVehicleTypeMortgageMapper grtVehicleTypeMortgageMapper;
	@Autowired
	private GrtRealEstateDetailMapper grtRealEstateDetailMapper;
	@Autowired
	private GrtTrafficShipMapper grtTrafficShipMapper;
	@Autowired
	private GrtLandUseRightMapper grtLandUseRightMapper;
	@Autowired
	private GrtEarningsAccountMapper grtEarningsAccountMapper;
	@Autowired
	private GrtLandManagementRightMapper grtLandManagementRightMapper;
	@Autowired
	private GrtMerchandiseMapper grtMerchandiseMapper;
	@Autowired
	private GrtCurrentAssetsMapper grtCurrentAssetsMapper;
	@Autowired
	private GrtChargingRightMortgageMapper grtChargingRightMortgageMapper;
	@Autowired
	private GrtBondPledgeMapper grtBondPledgeMapper;
	@Autowired
	private GrtWoodlandPropertyMapper grtWoodlandPropertyMapper;
	@Autowired
	private GrtIntellPropertyRightsMapper grtIntellPropertyRightsMapper;
	@Autowired
	private GrtReceivableMapper grtReceivableMapper;
	public Map<String, Object> saveGrtCollateral(GrtCollateral grtCollateral) throws JsonProcessingException{
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.insertSelective(grtCollateral);
		if(i>0){
			//根据类型插入
			if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_FDC)){//房地产
				GrtRealEstateMortgage grtRealEstateMortgage = new GrtRealEstateMortgage();
				grtRealEstateMortgage.setGuarantyId(grtCollateral.getGuarantyId());
				i = grtRealEstateMortgageMapper.insertSelective(grtRealEstateMortgage);
				if(i>0){
					GrtRealEstateDetail grtRealEstateDetail = new GrtRealEstateDetail();
					grtRealEstateDetail.setGuarantyId(grtCollateral.getGuarantyId());
					i = grtRealEstateDetailMapper.insertSelective(grtRealEstateDetail);
					if(i>0){
					
					} else{
						map.put("flag", "false");
						map.put("message", "操作失败!");
						throw new RuntimeException("插入房产地产表失败");
					}
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("插入房产类型表失败");
				}
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_ZJGC)){//在建工程
				GrtRealEstateMortgage grtRealEstateMortgage = new GrtRealEstateMortgage();
				grtRealEstateMortgage.setGuarantyId(grtCollateral.getGuarantyId());
				i = grtRealEstateMortgageMapper.insertSelective(grtRealEstateMortgage);
				if(i>0){
					GrtBuildingProject grtBuildingProject = new GrtBuildingProject();
					grtBuildingProject.setGuarantyId(grtCollateral.getGuarantyId());
					i = grtBuildingProjectMapper.insertSelective(grtBuildingProject);
					if(i>0){
					
					} else{
						map.put("flag", "false");
						map.put("message", "操作失败!");
						throw new RuntimeException("插入在建工程表失败");
					}
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("插入房产类型表失败");
				}
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_TDCBJYQ)){//土地承包经营权
				//插入无形资产表
				GrtIntangibleAssets grtIntangibleAssets = new GrtIntangibleAssets();
				grtIntangibleAssets.setGuarantyId(grtCollateral.getGuarantyId());
				i = grtIntangibleAssetsMapper.insertSelective(grtIntangibleAssets);
				if(i>0){
					GrtLandManagementRight grtLandManagementRight = new GrtLandManagementRight();
					grtLandManagementRight.setGuarantyId(grtCollateral.getGuarantyId());
					i = grtLandManagementRightMapper.insertSelective(grtLandManagementRight);
					if(i>0){
						
					} else{
						map.put("flag", "false");
						map.put("message", "操作失败!");
						throw new RuntimeException("插入土地承包经营权失败");
					}
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("插入流动资产表失败");
				}
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_TDSYQ)){//土地使用权
				//插入无形资产表
				GrtIntangibleAssets grtIntangibleAssets = new GrtIntangibleAssets();
				grtIntangibleAssets.setGuarantyId(grtCollateral.getGuarantyId());
				i = grtIntangibleAssetsMapper.insertSelective(grtIntangibleAssets);
				if(i>0){
					GrtLandUseRight grtLandUseRight = new GrtLandUseRight();
					grtLandUseRight.setGuarantyId(grtCollateral.getGuarantyId());
					i = grtLandUseRightMapper.insertSelective(grtLandUseRight);
					if(i>0){
						
					} else{
						map.put("flag", "false");
						map.put("message", "操作失败!");
						throw new RuntimeException("插入土地使用权表失败");
					}
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("插入无形资产表失败");
				}
				
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_CB)){//船舶
				GrtVehicleTypeMortgage grtVehicleTypeMortgage = new GrtVehicleTypeMortgage();
				grtVehicleTypeMortgage.setGuarantyId(grtCollateral.getGuarantyId());
				i = grtVehicleTypeMortgageMapper.insertSelective(grtVehicleTypeMortgage);
				if(i>0){
					GrtTrafficShip grtTrafficShip = new GrtTrafficShip();
					grtTrafficShip.setGuarantyId(grtCollateral.getGuarantyId());
					i = grtTrafficShipMapper.insertSelective(grtTrafficShip);
					if(i>0){
					
					} else{
						map.put("flag", "false");
						map.put("message", "操作失败!");
						throw new RuntimeException("插入船舶表失败");
					}
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("插入交通运输设备表失败");
				}
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_LQ)){//林权
				GrtWoodlandProperty grtWoodlandProperty = new GrtWoodlandProperty();
				grtWoodlandProperty.setGuarantyId(grtCollateral.getGuarantyId());
				i = grtWoodlandPropertyMapper.insertSelective(grtWoodlandProperty);
				if(i>0){
					
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("插入林权表失败");
				}
				
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_CH)){//存货
				//插入流动资产表
				GrtCurrentAssets grtCurrentAssets = new GrtCurrentAssets();
				grtCurrentAssets.setGuarantyId(grtCollateral.getGuarantyId());
				i = grtCurrentAssetsMapper.insertSelective(grtCurrentAssets);
				if(i>0){
					GrtMerchandise grtMerchandise = new GrtMerchandise();
					grtMerchandise.setGuarantyId(grtCollateral.getGuarantyId());
					i = grtMerchandiseMapper.insertSelective(grtMerchandise);
					if(i>0){
						
					} else{
						map.put("flag", "false");
						map.put("message", "操作失败!");
						throw new RuntimeException("插入存货表失败");
					}
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("插入流动资产表失败");
				}
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_ZSCQ)){//知识产权
				//插入无形资产表
				GrtIntangibleAssets grtIntangibleAssets = new GrtIntangibleAssets();
				grtIntangibleAssets.setGuarantyId(grtCollateral.getGuarantyId());
				i = grtIntangibleAssetsMapper.insertSelective(grtIntangibleAssets);
				if(i>0){
					GrtIntellPropertyRights grtIntellPropertyRights = new GrtIntellPropertyRights();
					grtIntellPropertyRights.setGuarantyId(grtCollateral.getGuarantyId());
					i = grtIntellPropertyRightsMapper.insertSelective(grtIntellPropertyRights);
					if(i>0){
						
					} else{
						map.put("flag", "false");
						map.put("message", "操作失败!");
						throw new RuntimeException("插入知识产权表失败");
					}
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("插入无形资产表失败");
				}
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_YSZK)){//应收账款
				//插入无形资产表
				GrtIntangibleAssets grtIntangibleAssets = new GrtIntangibleAssets();
				grtIntangibleAssets.setGuarantyId(grtCollateral.getGuarantyId());
				i = grtIntangibleAssetsMapper.insertSelective(grtIntangibleAssets);
				if(i>0){
					GrtReceivable grtReceivable = new GrtReceivable();
					grtReceivable.setGuarantyId(grtCollateral.getGuarantyId());
					i = grtReceivableMapper.insertSelective(grtReceivable);
					if(i>0){
						
					} else{
						map.put("flag", "false");
						map.put("message", "操作失败!");
						throw new RuntimeException("插入应收账款表失败");
					}
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("插入无形资产表失败");
				}
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_JJ)){//基金
				
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_GQ)){//股权
				
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_CD)){//存单
				//插入无形资产表
				GrtIntangibleAssets grtIntangibleAssets = new GrtIntangibleAssets();
				grtIntangibleAssets.setGuarantyId(grtCollateral.getGuarantyId());
				i = grtIntangibleAssetsMapper.insertSelective(grtIntangibleAssets);
				if(i>0){
					GrtDeposit grtDeposit = new GrtDeposit();
					grtDeposit.setGuarantyId(grtCollateral.getGuarantyId());
					i = grtDepositMapper.insertSelective(grtDeposit);
					if(i>0){
						
					} else{
						map.put("flag", "false");
						map.put("message", "操作失败!");
						throw new RuntimeException("插入存单表失败");
					}
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("插入无形资产表失败");
				}
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_GZZH)){//工资账户
				//插入无形资产表
				GrtIntangibleAssets grtIntangibleAssets = new GrtIntangibleAssets();
				grtIntangibleAssets.setGuarantyId(grtCollateral.getGuarantyId());
				i = grtIntangibleAssetsMapper.insertSelective(grtIntangibleAssets);
				if(i>0){
					GrtEarningsAccount grtEarningsAccount = new GrtEarningsAccount();
					grtEarningsAccount.setGuarantyId(grtCollateral.getGuarantyId());
					i = grtEarningsAccountMapper.insertSelective(grtEarningsAccount);
					if(i>0){
						
					} else{
						map.put("flag", "false");
						map.put("message", "操作失败!");
						throw new RuntimeException("插入工资账户表失败");
					}
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("插入无形资产表失败");
				}
				
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_ZJ)){//债券
				GrtBondPledge grtBondPledge = new GrtBondPledge();
				grtBondPledge.setGuarantyId(grtCollateral.getGuarantyId());
				i = grtBondPledgeMapper.insertSelective(grtBondPledge);
				if(i>0){
					
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("插入债券表失败");
				}
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_SFQ)){//收费权
				GrtChargingRightMortgage grtChargingRightMortgage = new GrtChargingRightMortgage();
				grtChargingRightMortgage.setGuarantyId(grtCollateral.getGuarantyId());
				i = grtChargingRightMortgageMapper.insertSelective(grtChargingRightMortgage);
				if(i>0){
					
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("插入收费权表失败");
				}
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_PJ)){//票据
				
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_CANGD)){//仓单
				
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_BD)){//保单
				
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_JQSB)){//机器设备
				
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_JTYSGJ)){//交通运输工具
				
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_JDC)){//机动车
				GrtVehicleTypeMortgage grtVehicleTypeMortgage = new GrtVehicleTypeMortgage();
				grtVehicleTypeMortgage.setGuarantyId(grtCollateral.getGuarantyId());
				i = grtVehicleTypeMortgageMapper.insertSelective(grtVehicleTypeMortgage);
				if(i>0){
					GrtTrafficCar grtTrafficCar = new GrtTrafficCar();
					grtTrafficCar.setGuarantyId(grtCollateral.getGuarantyId());
					i = grtTrafficCarMapper.insertSelective(grtTrafficCar);
					if(i>0){
					
					} else{
						map.put("flag", "false");
						map.put("message", "操作失败!");
						throw new RuntimeException("插入机动车表失败");
					}
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("插入交通运输设备表失败");
				}
				
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_NJJ)){//农机具
				
			}else if(grtCollateral.getCollateralTypeCd().equals(Constant.GC_QT)){//其他
				
			}
			map.put("grtCollateral", grtCollateral);
			map.put("flag", "true");
			map.put("message", "操作成功!");
		} else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("插入抵质押品表失败");
		}
		return map;
	}
	public Map<String, Object> updateGrtDepositAndGrtCollateral(GrtCollateral grtCollateral, GrtDeposit grtDeposit) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			i = grtDepositMapper.updateByPrimaryKeySelective(grtDeposit);
			if(i>0){
				map.put("flag", "true");
				map.put("message", "操作成功!");
			} else{
				map.put("flag", "false");
				map.put("message", "操作失败!");
				throw new RuntimeException("更新存单表失败");
			}
		}else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押物表发生异常");
		}
		return map;
	}
	public Map<String, Object> updateBuildingProjectAndGrtCollateral(GrtCollateral grtCollateral,
			GrtRealEstateMortgage grtRealEstateMortgage, GrtBuildingProject grtBuildingProject) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			i = grtRealEstateMortgageMapper.updateByPrimaryKeySelective(grtRealEstateMortgage);
			if(i>0){
				i = grtBuildingProjectMapper.updateByPrimaryKeySelective(grtBuildingProject);
				if(i>0){
					map.put("flag", "true");
					map.put("message", "操作成功!");
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("保存在建工程表发生异常");
				}
			} else{
				map.put("flag", "false");
				map.put("message", "操作失败!");
				throw new RuntimeException("保存房产类型抵押表发生异常");
			}
		} else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押物表发生异常");
		}
		return map;
	}
	public Map<String, Object> updateRealEstateAndGrtCollateral(GrtCollateral grtCollateral,
			GrtRealEstateMortgage grtRealEstateMortgage, GrtRealEstateDetail grtRealEstateDetail) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			i = grtRealEstateMortgageMapper.updateByPrimaryKeySelective(grtRealEstateMortgage);
			if(i>0){
				i = grtRealEstateDetailMapper.updateByPrimaryKeySelective(grtRealEstateDetail);
				if(i>0){
					map.put("flag", "true");
					map.put("message", "操作成功!");
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("保存房产其他信息表发生异常");
				}
			} else{
				map.put("flag", "false");
				map.put("message", "操作失败!");
				throw new RuntimeException("保存房产类型抵押表发生异常");
			}
		} else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押物表发生异常");
		}
		return map;
	}
	public Map<String, Object> updateTrafficCarAndGrtCollateral(GrtCollateral grtCollateral,
			GrtVehicleTypeMortgage grtVehicleTypeMortgage, GrtTrafficCar grtTrafficCar) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			i = grtVehicleTypeMortgageMapper.updateByPrimaryKeySelective(grtVehicleTypeMortgage);
			if(i>0){
				i = grtTrafficCarMapper.updateByPrimaryKeySelective(grtTrafficCar);
				if(i>0){
					map.put("flag", "true");
					map.put("message", "操作成功!");
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("保存机动车信息表发生异常");
				}
			} else{
				map.put("flag", "false");
				map.put("message", "操作失败!");
				throw new RuntimeException("保存交通运输设备表发生异常");
			}
		} else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押物表发生异常");
		}
		return map;
	}
	public Map<String, Object> updateShipAndGrtCollateral(GrtCollateral grtCollateral,
			GrtVehicleTypeMortgage grtVehicleTypeMortgage, GrtTrafficShip grtTrafficShip) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			i = grtVehicleTypeMortgageMapper.updateByPrimaryKeySelective(grtVehicleTypeMortgage);
			if(i>0){
				i = grtTrafficShipMapper.updateByPrimaryKeySelective(grtTrafficShip);
				if(i>0){
					map.put("flag", "true");
					map.put("message", "操作成功!");
				} else{
					map.put("flag", "false");
					map.put("message", "操作失败!");
					throw new RuntimeException("保存船舶信息表发生异常");
				}
			} else{
				map.put("flag", "false");
				map.put("message", "操作失败!");
				throw new RuntimeException("保存交通运输设备表发生异常");
			}
		} else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押物表发生异常");
		}
		return map;
	}
	public Map<String, Object> updateLandUseRightAndGrtCollateral(GrtCollateral grtCollateral,
			GrtLandUseRight grtLandUseRight) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			i = grtLandUseRightMapper.updateByPrimaryKeySelective(grtLandUseRight);
			if(i>0){
				map.put("flag", "true");
				map.put("message", "操作成功!");
			} else{
				map.put("flag", "false");
				map.put("message", "操作失败!");
				throw new RuntimeException("更新土地使用权表失败了");
			}
		}else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押品表失败了！");
		}
		return map;
	}
	public Map<String, Object> updateEarningsAccountAndGrtCollateral(GrtCollateral grtCollateral,
			GrtEarningsAccount grtEarningsAccount) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			i = grtEarningsAccountMapper.updateByPrimaryKeySelective(grtEarningsAccount);
			if(i>0){
				map.put("flag", "true");
				map.put("message", "操作成功!");
			} else{
				map.put("flag", "false");
				map.put("message", "操作失败!");
				throw new RuntimeException("更新工资账户表失败了");
			}
		}else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押品表失败了！");
		}
		return map;
	}
	public Map<String, Object> updateOtherAndGrtCollateral(GrtCollateral grtCollateral) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			map.put("flag", "true");
			map.put("message", "操作成功!");
		}else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押品表失败了！");
		}
		return map;
	}
	public Map<String, Object> updateLandManagementRightAndGrtCollateral(GrtCollateral grtCollateral,
			GrtLandManagementRight grtLandManagementRight) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			i = grtLandManagementRightMapper.updateByPrimaryKeySelective(grtLandManagementRight);
			if(i>0){
				map.put("flag", "true");
				map.put("message", "操作成功!");
			} else{
				map.put("flag", "false");
				map.put("message", "操作失败!");
				throw new RuntimeException("更新土地承包经营权表失败了");
			}
		}else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押品表失败了！");
		}
		return map;
	}
	public Map<String, Object> updateMerchandiseAndGrtCollateral(GrtCollateral grtCollateral,
			GrtMerchandise grtMerchandise) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			i = grtMerchandiseMapper.updateByPrimaryKeySelective(grtMerchandise);
			if(i>0){
				map.put("flag", "true");
				map.put("message", "操作成功!");
			} else{
				map.put("flag", "false");
				map.put("message", "操作失败!");
				throw new RuntimeException("更新存货表失败");
			}
		}else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押品表失败了！");
		}
		return map;
	}
	public Map<String, Object> updateChargingRightMortgageAndGrtCollateral(GrtCollateral grtCollateral,
			GrtChargingRightMortgage grtChargingRightMortgage) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			i = grtChargingRightMortgageMapper.updateByPrimaryKeySelective(grtChargingRightMortgage);
			if(i>0){
				map.put("flag", "true");
				map.put("message", "操作成功!");
			} else{
				map.put("flag", "false");
				map.put("message", "操作失败!");
				throw new RuntimeException("更新收费权表失败");
			}
		}else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押品表失败了！");
		}
		return map;
	}
	public Map<String, Object> updateBondPledgeAndGrtCollateral(GrtCollateral grtCollateral,
			GrtBondPledge grtBondPledge) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			i = grtBondPledgeMapper.updateByPrimaryKeySelective(grtBondPledge);
			if(i>0){
				map.put("flag", "true");
				map.put("message", "操作成功!");
			} else{
				map.put("flag", "false");
				map.put("message", "操作失败!");
				throw new RuntimeException("更新债券表失败");
			}
		}else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押品表失败了！");
		}
		return map;
	}
	public Map<String, Object> updateWoodlandPropertyAndGrtCollateral(GrtCollateral grtCollateral,
			GrtWoodlandProperty grtWoodlandProperty) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			i = grtWoodlandPropertyMapper.updateByPrimaryKeySelective(grtWoodlandProperty);
			if(i>0){
				map.put("flag", "true");
				map.put("message", "操作成功!");
			} else{
				map.put("flag", "false");
				map.put("message", "操作失败!");
				throw new RuntimeException("更新林权表失败");
			}
		}else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押品表失败了！");
		}
		return map;
	}
	public Map<String, Object> updateIntellPropertyRightsAndGrtCollateral(GrtCollateral grtCollateral,
			GrtIntellPropertyRights grtIntellPropertyRights) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			i = grtIntellPropertyRightsMapper.updateByPrimaryKeySelective(grtIntellPropertyRights);
			if(i>0){
				map.put("flag", "true");
				map.put("message", "操作成功!");
			} else{
				map.put("flag", "false");
				map.put("message", "操作失败!");
				throw new RuntimeException("更新知识产权表失败");
			}
		}else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押品表失败了！");
		}
		return map;
	}
	public Map<String, Object> updateReceivableAndGrtCollateral(GrtCollateral grtCollateral,
			GrtReceivable grtReceivable) {
		Map<String, Object> map = new HashMap<>();
		int i = grtCollateralMapper.updateByPrimaryKeySelective(grtCollateral);
		if(i>0){
			i = grtReceivableMapper.updateByPrimaryKeySelective(grtReceivable);
			if(i>0){
				map.put("flag", "true");
				map.put("message", "操作成功!");
			} else{
				map.put("flag", "false");
				map.put("message", "操作失败!");
				throw new RuntimeException("更新应收账款失败");
			}
		}else{
			map.put("flag", "false");
			map.put("message", "操作失败!");
			throw new RuntimeException("更新抵质押品表失败了！");
		}
		return map;
	}
}
